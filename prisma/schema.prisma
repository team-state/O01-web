generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id                       String   @id @default(cuid())
  sessionToken             String   @unique
  userId                   String
  expires                  DateTime
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  nickname         String    @unique @default(cuid())
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  nickNameVerified Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  post     Post[]
  category Category[]
  tag      Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Post {
  id          Int      @id @unique @default(autoincrement())
  url         String   @unique
  userId      String
  title       String
  description String
  thumbnailId String
  content     String   @db.MediumText
  isPrivate   Boolean
  categoryId  Int?
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  category Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  tag      Post_Tag[]

  @@index([userId])
  @@index([categoryId])
}

model Tag {
  name   String @id @unique
  userId String

  user User       @relation(fields: [userId], references: [id])
  post Post_Tag[]

  @@index([userId])
}

model Category {
  id          Int      @id @unique @default(autoincrement())
  name        String   @unique
  thumbnailId String
  url         String   @unique
  createdAt   DateTime @default(now())
  userId      String

  user User   @relation(fields: [userId], references: [id])
  post Post[]

  @@index([userId])
}

model Post_Tag {
  postId     Int
  tagName    String
  assignedAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag  Tag  @relation(fields: [tagName], references: [name], onDelete: Cascade, onUpdate: Cascade)

  @@id([postId, tagName])
  @@index([postId])
  @@index([tagName])
}
